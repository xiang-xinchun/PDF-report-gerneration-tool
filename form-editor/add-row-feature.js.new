// 添加行功能模块
const addRowFeature = {
    // 初始化行添加和删除功能
    init: function() {
        console.log('添加行功能模块初始化...');
        this.setupAddRowButtons();
        this.extendUndoFunction();
        console.log('添加行功能初始化完成');
    },

    // 设置添加行按钮
    setupAddRowButtons: function() {
        console.log('设置添加行按钮...');
        // 所有添加行按钮已经通过内联HTML添加
        // 这个函数留空，因为按钮已经直接添加到HTML中
        console.log('添加行按钮设置完成');
    },

    // 添加子行
    addSubRow: function(parentRowId) {
        console.log('添加子行，父行ID:', parentRowId);
        
        try {
            // 获取父行元素
            const parentRow = document.getElementById(parentRowId);
            if (!parentRow) {
                console.error('未找到父行元素:', parentRowId);
                return;
            }
            
            // 获取父行的类别单元格
            const categoryCell = parentRow.querySelector('.category');
            if (!categoryCell) {
                console.error('未找到类别单元格');
                return;
            }
            
            // 获取类别名称
            const categoryName = categoryCell.textContent.trim().replace(/[\n\r\+]/g, '');
            console.log('类别名称:', categoryName);
            
            // 创建新行
            const newRow = document.createElement('tr');
            const rowIdCounter = Date.now(); // 使用时间戳作为唯一ID
            const newRowId = `${parentRowId}-sub-${rowIdCounter}`;
            newRow.id = newRowId;
            newRow.className = 'subrow';
            newRow.dataset.parentRow = parentRowId;
            
            // 创建单元格内容
            let html = '';
            // 第一列为空（因为父行的类别单元格已经使用rowspan）
            html += '<td class="table-td sub-category"><div contenteditable="true" class="input-box"></div></td>';
            
            // 添加4列可编辑单元格
            for (let i = 0; i < 4; i++) {
                html += '<td class="table-td"><div contenteditable="true" class="input-box"></div></td>';
            }
            
            // 添加删除按钮单元格
            html += `<td class="table-td delete-cell" style="display:table-cell">
                <button class="row-delete-button" title="删除此行" 
                onclick="addRowFeature.removeSubRow('${newRowId}')" 
                style="display:inline-block; width:22px; height:22px; background-color:#f44336; color:white; border-radius:50%; font-weight:bold; text-align:center; border:none;">×</button>
            </td>`;
            
            newRow.innerHTML = html;
            
            // 更新父行类别单元格的rowspan
            const currentRowspan = parseInt(categoryCell.getAttribute('rowspan') || 1);
            categoryCell.setAttribute('rowspan', currentRowspan + 1);
            
            // 插入新行到父行之后
            const nextRow = parentRow.nextElementSibling;
            if (nextRow && nextRow.classList.contains('subrow') && nextRow.dataset.parentRow === parentRowId) {
                // 如果下一行是同一个父行的子行，则继续找下去，直到找到最后一个子行
                let lastSubRow = nextRow;
                while (lastSubRow.nextElementSibling && 
                       lastSubRow.nextElementSibling.classList.contains('subrow') && 
                       lastSubRow.nextElementSibling.dataset.parentRow === parentRowId) {
                    lastSubRow = lastSubRow.nextElementSibling;
                }
                lastSubRow.parentNode.insertBefore(newRow, lastSubRow.nextElementSibling);
            } else {
                // 如果下一行不是子行，则直接在父行后面插入
                parentRow.parentNode.insertBefore(newRow, nextRow);
            }
            
            // 记录操作到历史记录中，以便撤销
            if (typeof window.recordOperation === 'function') {
                window.recordOperation({
                    type: 'addSubRow',
                    categoryRowId: parentRowId,
                    newRowId: newRowId,
                    rowspan: currentRowspan + 1
                });
            }
            
            // 显示通知
            if (typeof window.showNotification === 'function') {
                window.showNotification({
                    title: '添加成功',
                    message: `已为"${categoryName}"类别添加了一行`,
                    type: 'success'
                });
            } else {
                console.log(`已为"${categoryName}"类别添加了一行`);
            }
            
            console.log('成功添加子行:', newRowId);
        } catch (error) {
            console.error('添加子行时发生错误:', error);
        }
    },

    // 删除子行
    removeSubRow: function(rowId) {
        console.log('删除子行:', rowId);
        
        try {
            const row = document.getElementById(rowId);
            if (!row) {
                console.error('未找到要删除的行:', rowId);
                return;
            }
            
            // 获取父行ID
            const parentRowId = row.dataset.parentRow;
            if (!parentRowId) {
                console.error('未找到父行ID');
                return;
            }
            
            // 获取父行
            const parentRow = document.getElementById(parentRowId);
            if (!parentRow) {
                console.error('未找到父行:', parentRowId);
                return;
            }
            
            // 获取父行的类别单元格
            const categoryCell = parentRow.querySelector('.category');
            if (!categoryCell) {
                console.error('未找到类别单元格');
                // 如果找不到类别单元格，仍然删除此行
                row.remove();
                return;
            }
            
            // 减少rowspan值
            const currentRowspan = parseInt(categoryCell.getAttribute('rowspan') || '1');
            if (currentRowspan > 1) {
                categoryCell.setAttribute('rowspan', currentRowspan - 1);
            }
            
            // 记录操作到历史记录中
            if (typeof window.recordOperation === 'function') {
                window.recordOperation({
                    type: 'removeSubRow',
                    rowId: rowId,
                    parentRowId: parentRowId,
                    previousRowspan: currentRowspan
                });
            }
            
            // 移除行
            row.remove();
            
            // 显示通知
            if (typeof window.showNotification === 'function') {
                window.showNotification({
                    title: '删除成功',
                    message: '已删除该行',
                    type: 'info'
                });
            } else {
                console.log('已删除子行');
            }
        } catch (error) {
            console.error('删除子行时发生错误:', error);
        }
    },
    
    // 扩展现有的撤销操作函数，支持撤销添加行操作
    extendUndoFunction: function() {
        // 保存原始函数的引用
        if (typeof window.originalUndoLastOperation === 'undefined' && typeof window.undoLastOperation === 'function') {
            window.originalUndoLastOperation = window.undoLastOperation;
            
            // 重新定义撤销函数
            window.undoLastOperation = function() {
                if (!window.operationHistory || window.operationHistory.length === 0) return;
                
                const lastOperation = window.operationHistory[window.operationHistory.length - 1];
                
                if (lastOperation.type === 'addSubRow') {
                    // 先从历史记录中移除该操作
                    window.operationHistory.pop();
                    
                    // 找到添加的行
                    const addedRow = document.getElementById(lastOperation.newRowId);
                    if (addedRow) {
                        // 找到类别行
                        const categoryRow = document.getElementById(lastOperation.categoryRowId);
                        if (categoryRow) {
                            // 找到类别单元格
                            const categoryCell = categoryRow.querySelector('.category');
                            if (categoryCell) {
                                // 恢复原来的rowspan值
                                categoryCell.setAttribute('rowspan', lastOperation.rowspan - 1);
                            }
                        }
                        // 移除添加的行
                        if (addedRow.parentNode) {
                            addedRow.parentNode.removeChild(addedRow);
                        }
                    }
                    
                    // 更新撤销按钮状态
                    if (typeof window.updateUndoButtonState === 'function') {
                        window.updateUndoButtonState();
                    }
                    return;
                } else if (lastOperation.type === 'removeSubRow') {
                    // 先从历史记录中移除该操作
                    window.operationHistory.pop();
                    
                    // 这里应该有恢复子行的逻辑
                    // 由于子行已被删除，此处需要重新创建子行
                    // 此处略过复杂的重建逻辑
                    
                    // 更新撤销按钮状态
                    if (typeof window.updateUndoButtonState === 'function') {
                        window.updateUndoButtonState();
                    }
                    return;
                }
                
                // 调用原始的撤销操作函数处理其他类型的操作
                window.originalUndoLastOperation();
            };
        }
    },
    
    // 隐藏表格行（接口兼容，实际上应该不需要这个方法）
    hideTableRow: function(rowId) {
        console.log('尝试隐藏行:', rowId);
        const row = document.getElementById(rowId);
        if (row) {
            // 仅隐藏而不删除，保持数据结构完整
            row.style.display = 'none';
            
            // 记录操作到历史记录
            if (typeof window.recordOperation === 'function') {
                window.recordOperation({
                    type: 'hideRow',
                    rowId: rowId,
                    previousDisplay: row.style.display || ''
                });
            }
            
            // 显示通知
            if (typeof window.showNotification === 'function') {
                window.showNotification({
                    title: '隐藏成功',
                    message: '已隐藏该行',
                    type: 'info'
                });
            }
        }
    }
};

// 在文档加载完成后初始化
document.addEventListener('DOMContentLoaded', function() {
    console.log('文档加载完成，初始化添加行功能模块...');
    setTimeout(() => {
        addRowFeature.init();
    }, 500);
});

// 暴露给全局，以便内联onclick事件可以调用
window.addRowFeature = addRowFeature;

// 为了兼容性保留旧的全局函数
function removeSubRow(rowId) {
    return addRowFeature.removeSubRow(rowId);
}

function hideTableRow(rowId) {
    return addRowFeature.hideTableRow(rowId);
}